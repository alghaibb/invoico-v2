generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String?
  email         String    @unique
  password      String?
  emailVerified DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts            Account[]
  sessions            Session[]
  verificationOTPs    VerificationOTP[]
  resetPasswordTokens ResetPasswordToken[]
  magicLinkTokens     MagicLinkToken[]
  invoices            Invoice[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String   @unique
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationOTP {
  id        String   @id @default(cuid())
  userId    String
  otp       String
  reason    String   @default("resend")
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([otp])
  @@map("verification_otps")
}

model ResetPasswordToken {
  id        String   @id @default(cuid())
  userId    String
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@map("reset_password_tokens")
}

model MagicLinkToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@map("magic_link_tokens")
}

model Invoice {
  id String @id @default(cuid())

  invoiceName   String        @default("New Invoice")
  total         Decimal       @db.Decimal(10, 2)
  tax           Int
  status        InvoiceStatus
  date          DateTime
  dueDate       Int
  fromName      String
  fromEmail     String?
  fromAddress   String?
  clientName    String
  clientEmail   String?
  clientAddress String?
  currency      String
  invoiceNumber String
  notes         String?
  lastSent      DateTime?

  invoiceItems InvoiceItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId   String
  description String
  quantity    Int
  price       Decimal @db.Decimal(10, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invoice_items")
}

enum InvoiceStatus {
  PAID
  PENDING
  OVERDUE
}

model UserSubscription {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  stripeCustomerId        String   @unique
  stripeSubscriptionId    String   @unique
  stripePriceId           String   @unique
  stripeCurrentPeriodEnd  DateTime
  stripeCancelAtPeriodEnd Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_subscriptions")
}

model UserMonthlyInvoiceUsage {
  id           String   @id @default(cuid())
  userId       String   @unique
  invoiceCount Int      @default(0)
  month        Int
  year         Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("user_monthly_invoice_usages")
}
